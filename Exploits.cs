/*
   Exploits.cs
   ===========

   Description:           Dumping ground for trivial cheats/exploits.
                          Generally doing things you shouldn't be able to,
                          or doing things you can do, but remotely.

*/

using BepInEx;
using BepInEx.Logging;
using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using System.Diagnostics;

namespace EasyCompany
{
    internal static class Exploits
    {
        // Add count credits to the terminal.
        public static void AddMoney(int count)
        {
            // Find Terminal
            var term = UnityEngine.Object.FindObjectOfType<Terminal>();

            // Terminal should always exist in-game
            if (term == null)
            {
                Main.log.LogWarning("Failed to find Terminal object!");

                return;
            }

            // Add money
            term.groupCredits += count;

            // If client, tell host we got money
            if (!GameNetworkManager.Instance.localPlayerController.IsServer)
            {
                term.SyncGroupCreditsServerRpc(term.groupCredits, term.numberOfItemsInDropship);
            }
        }

        // Unlock the nearest locked door.
        public static void UnlockNearestLockedDoor()
        {
            Util.FindNearestComponentOfTypeWhere<DoorLock>(d => d.isLocked)?.UnlockDoorServerRpc();
        }

        // Fix the nearest leaking steam valve.
        public static void FixNearestValve()
        {
            // valveHasBurst is private so have to use a proxy
            Util.FindNearestComponentOfTypeWhere<SteamValveHazard>(v => !v.valveSteamParticle.isStopped)?.FixValve();
        }

        // Explode the nearest unexploded landmine.
        public static void ExplodeNearestMine()
        {
            Util.FindNearestComponentOfTypeWhere<Landmine>(lm => !lm.hasExploded)?.ExplodeMineServerRpc();
        }

        // Place the nearest unbeserked turret into beserk mode
        public static void BeserkNearestTurret()
        {
            var closestUnbeserk = Util.FindNearestComponentOfTypeWhere<Turret>(
                t => t.turretMode != TurretMode.Berserk && t.turretActive
            );
            closestUnbeserk?.EnterBerserkModeServerRpc(-1);
        }

        // Toggle the ship lights.
        public static void ToggleShipLights()
        {
            var shipLights = UnityEngine.Object.FindObjectOfType<ShipLights>();

            // ShipLights should always exist in-game
            if (shipLights == null)
            {
                Main.log.LogWarning("Failed to find ShipLights object!");
            }

            shipLights?.SetShipLightsServerRpc(!shipLights.areLightsOn);
        }

        // Activates any noisemaker props dropped by the local player
        // NOTE: Picking up gives ownership, which is required for the RPC.
        public static void TriggerDroppedNoisemakers()
        {
            foreach (var noiseMaker in UnityEngine.Object.FindObjectsOfType<NoisemakerProp>())
            {
                noiseMaker.UseItemOnClient(true);
            }
        }

        // Force the monster inside the company building to attack.
        public static void TriggerCompanyDeskAttack()
        {
            UnityEngine.Object.FindObjectOfType<DepositItemsDesk>()?.AttackPlayersServerRpc();
        }

        // Raycast from player perspective and teleport to the resulting position.
        public static void TeleportWhereLooking()
        {
            UnityEngine.Vector3 lookingAt;

            if (Util.RaycastFromPlayer(out lookingAt))
            {
                GameNetworkManager.Instance.localPlayerController.TeleportPlayer(lookingAt);
            }
        }

        // Set the player's level given the level index.
        // Accepts -1 for the highest level (boss)
        private static void SetPlayerLevel(int levelIdx)
        {
            var hudMgr = UnityEngine.Object.FindObjectOfType<HUDManager>();

            // Accept -1 for boss
            if (levelIdx == -1)
            {
                levelIdx = hudMgr.playerLevels.Length - 1;
            }

            // Level index must not be negative
            Debug.Assert(levelIdx >= 0);

            hudMgr.localPlayerLevel = levelIdx;
            hudMgr.localPlayerXP = hudMgr.playerLevels[levelIdx].XPMin;
            hudMgr.SyncPlayerLevelServerRpc(
                (int)GameNetworkManager.Instance.localPlayerController.playerClientId,
                hudMgr.localPlayerLevel,
                true // playedDuringBeta
            );

        }

        // Set player levels
        public static void SetPlayerLevelIntern() => SetPlayerLevel(0);
        public static void SetPlayerLevelBoss() => SetPlayerLevel(-1);
    }
}
